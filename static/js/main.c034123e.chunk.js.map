{"version":3,"sources":["components/Game.js","components/CardView.js","components/MemoryCards.js","components sync /^.*$","components/images/1.jpg","components/images/10.jpg","components/images/2.jpg","components/images/3.jpg","components/images/4.jpg","components/images/5.jpg","components/images/6.jpg","components/images/7.jpg","components/images/8.jpg","components/images/9.jpg","components/images/back.png","App.js","index.js"],"names":["Game","props","initGame","memoryCards","generateCardSet","setState","turnNo","pairsFound","numClicksWithinTurn","firstId","undefined","secondId","getCardViews","cardViews","onClick","onCardClicked","cards","forEach","c","cardView","key","id","image","imageUp","matched","push","clearCards","id1","id2","state","flipCard","clearTimeout","timeout","cardsHaveIdenticalImages","setTimeout","setCardAsMatched","onPlayAgain","render","gameStatus","className","NUM_IMAGES","MemoryCards","this","Component","CardView","imPath","src","require","alt","bind","i","card1","card2","shuffle","getCard","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c034123e.chunk.js","sourcesContent":["// **************************************************\n//  Class:  MemoryCards.js\n//  Defines methods for the cards in the game.\n// **************************************************\n\nimport React, { Component } from 'react';\nimport '../css/Game.css';\nimport CardView from './CardView';\nimport MemoryCards from './MemoryCards';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.memoryCards = new MemoryCards();\n  }\n\n  // cannot figure out how to get it to work with componentDidMount so using UNSAFE to suppress warning.\n  UNSAFE_componentWillMount() {\n    this.initGame();\n  }\n\n  // ************************************\n  //      initGame\n  // Generate shuffled card set\n  // set initial state\n  // ************************************\n  initGame = () => {\n    this.memoryCards.generateCardSet();\n    this.setState({\n      turnNo : 0,\n      pairsFound : 0,\n      numClicksWithinTurn : 0,\n      firstId : undefined,\n      secondId : undefined\n    });\n  }\n\n  // ****************************************************\n  //      getCardViews\n  // @return: cardViews -- an array of <CardView /> cards\n  // Setup cards with props and push to cardViews array.\n  // ****************************************************\n  getCardViews = () => {\n    let cardViews = [];\n    let onClick = this.onCardClicked;\n    this.memoryCards.cards.forEach(c => {\n      let cardView = <CardView \n        key={c.id} \n        id={c.id} \n        image={c.image}\n        imageUp={c.imageUp}\n        matched={c.matched} \n        onClick={onClick}\n      />;\n      // add card to array\n      cardViews.push(cardView);\n    });\n    return cardViews;\n  }\n\n  // ************************************************************************\n  //      clearCards\n  // @param id1, id2 \n  // if player has clicked on two cards, we reset state and increment turnNo\n  // ************************************************************************\n  clearCards = (id1, id2) => {\n    if (this.state.numClicksWithinTurn !== 2) return;\n    this.memoryCards.flipCard(this.state.firstId, false);\n    this.memoryCards.flipCard(this.state.secondId, false);\n    this.setState({\n      firstId: undefined,\n      secondId: undefined,\n      numClicksWithinTurn: 0,\n      turnNo : this.state.turnNo + 1\n    });\n  }\n\n  // **************************************************\n  //      onCardClicked\n  // @param id, image\n  // handles game logic when a card is clicked--namely\n  // updating state appropriately.\n  // **************************************************\n  onCardClicked = (id, image) => {\n    if (this.state.numClicksWithinTurn === 0 || this.state.numClicksWithinTurn === 2) {\n      if (this.state.numClicksWithinTurn === 2) {\n        clearTimeout(this.timeout);\n        this.clearCards(this.state.firstId, this.state.secondId);        \n      }\n      this.memoryCards.flipCard(id, true);\n      this.setState({\n        firstId : id,\n        numClicksWithinTurn : 1\n      });\n    } else if (this.state.numClicksWithinTurn === 1) {\n      this.memoryCards.flipCard(id, true);\n      this.setState({\n        secondId : id,\n        numClicksWithinTurn : 2\n      });\n\n      if (this.memoryCards.cardsHaveIdenticalImages(id, this.state.firstId)) {\n        // cards matched--wait 1.2 seconds before removing\n        setTimeout(() => {\n          this.memoryCards.setCardAsMatched(this.state.firstId, true);\n          this.memoryCards.setCardAsMatched(id, true);\n          this.setState({\n            pairsFound: this.state.pairsFound + 1,\n            firstId: undefined,\n            secondId: undefined,\n            turnNo : this.state.turnNo + 1,\n            numClicksWithinTurn: 0\n          });\n        },1200);\n\n      } else {\n        setTimeout(() => { \n          // console.log(\"didn't match turning back over\");\n          this.clearCards(this.state.firstId, this.state.secondId);\n        },1200);\n      }\n    }\n  } // onCardClicked\n\n  // **************************************************\n  //      onPlayAgain\n  // call initGame which generates a shuffled card set\n  // and sets the initial state of the game\n  // **************************************************\n  onPlayAgain = () => this.initGame();\n\n  // **************************************\n  //            render\n  // **************************************\n  render = () => {\n    // cards array \n    let cardViews = this.getCardViews();\n\n    let gameStatus = <div className='game-status'>\n                      <div>Moves: {this.state.turnNo}</div>\n                      <div>Score: {this.state.pairsFound}</div>\n                    </div>;\n\n    // Game over logic\n    if (this.state.pairsFound === this.memoryCards.NUM_IMAGES) {\n      gameStatus = <div className='game-status'>\n                    <div>Awesome! You made {this.state.turnNo} moves</div>\n                    <div>Your score is: {this.state.pairsFound}</div>\n                    <div><button className='restart-button' onClick={this.onPlayAgain}>Play again?</button></div></div>; \n    }\n\n    return (\n      <div className='game-container'>\n        <header className='game-header'>\n          <h1>Memory</h1>\n          <div>{gameStatus}</div>\n        </header>\n        <div className='card-container'>\n          {cardViews}\n        </div>\n      </div>\n    );\n  }\n  \n} // Game\n\nexport default Game;\n","// **************************************\n//  Class:  CardView.js\n//  Defines the view of a memory card\n// **************************************\n\nimport React, { Component } from 'react';\nimport '../css/Game.css';\n\nclass CardView extends Component {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  // *****************************************************\n  //      onClick\n  // ties onCardClicked method from Game.js to this card\n  // *****************************************************\n  onClick() {\n    if (!this.props.matched && !this.props.imageUp) {\n      this.props.onClick(this.props.id, this.props.image);      \n    }\n  }\n\n  // ************************************\n  //      render\n  // ************************************\n  render = () => {\n    let imPath = './images/';\n\n    // set image path based on whether imageUp is true\n    imPath = (this.props.imageUp) ? imPath + this.props.image + '.jpg' : imPath + 'back.png';\n\n    let className='card';\n    if (this.props.matched) className = className + ' matched';\n\n    return (\n        <img className={className} src={require(`${imPath}`)} alt='' onClick={this.onClick}/>\n    );      \n  };\n  \n}; // CardView\n\nexport default CardView;\n","// ****************************************************************\n//  Class:  MemoryCards.js\n//  @Constructor: initializes cards array sets const NUM_IMAGES = 10\n//  Defines methods for the cards in the game.\n// ****************************************************************\n\nimport shuffle from 'shuffle-array';\n\nclass MemoryCards {\n  constructor() {\n    this.cards = [];\n    this.NUM_IMAGES = 10;\n  }\n\n  // **************************************************\n  //      generateCardSet\n  // generates a set of shuffled cards with image pairs\n  // **************************************************\n  generateCardSet = () => {\n    this.cards = [];\n    let id=1;\n    for(let i=1; i <= this.NUM_IMAGES; i++) {\n      let card1 = {\n        id: id,\n        image : i,\n        imageUp: false,\n        matched: false\n      };\n      id++;\n      let card2 = {\n        id: id,\n        image : i,\n        imageUp: false,\n        matched: false\n      };\n      this.cards.push(card1);\n      this.cards.push(card2);\n      id++;\n    }\n\n    // randomize cards\n    shuffle(this.cards);\n  }\n\n  // *************************************************\n  //       getCard\n  // @param: id\n  // @return: card with id equal to the one passed in\n  // *************************************************\n  getCard = (id) => {\n    for(let i=0; i < 2 * this.NUM_IMAGES; i++) {\n      if (this.cards[i].id === id) return this.cards[i];\n    };\n  }\n\n  // ******************************************************\n  //      flipCard\n  // @param: id, imageUp\n  // set imageUp to true or false on card with matching id\n  // ******************************************************\n  flipCard = (id, imageUp) => this.getCard(id).imageUp = imageUp;\n\n  // ******************************************************\n  //      setCardAsMatched\n  // @param: id, matched\n  // set matched to true or false on card with matching id\n  // ******************************************************\n  setCardAsMatched = (id, matched) => this.getCard(id).matched = matched;\n\n  // *************************************************************\n  //      cardsHaveIdenticalImages\n  // @param id1, id2\n  // @return true if card w/ id1 has the same image as card w/ id2\n  // *************************************************************\n  cardsHaveIdenticalImages = (id1, id2) => this.getCard(id1).image === this.getCard(id2).image ? true : false;\n\n}; // MemoryCards\n\nexport default MemoryCards;\n","var map = {\n\t\"./CardView\": 7,\n\t\"./CardView.js\": 7,\n\t\"./Game\": 6,\n\t\"./Game.js\": 6,\n\t\"./MemoryCards\": 8,\n\t\"./MemoryCards.js\": 8,\n\t\"./images/1.jpg\": 21,\n\t\"./images/10.jpg\": 22,\n\t\"./images/2.jpg\": 23,\n\t\"./images/3.jpg\": 24,\n\t\"./images/4.jpg\": 25,\n\t\"./images/5.jpg\": 26,\n\t\"./images/6.jpg\": 27,\n\t\"./images/7.jpg\": 28,\n\t\"./images/8.jpg\": 29,\n\t\"./images/9.jpg\": 30,\n\t\"./images/back.png\": 31\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 20;","module.exports = __webpack_public_path__ + \"static/media/1.8a856518.jpg\";","module.exports = __webpack_public_path__ + \"static/media/10.b4a0d85d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.dd2d8fd7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.5c50e193.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.47df5f35.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.02ba2d8f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.d1f4c8e2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7.dffea7f1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8.a09d1a53.jpg\";","module.exports = __webpack_public_path__ + \"static/media/9.f1d91ca3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/back.85f92029.png\";","import React, { Component } from 'react';\nimport Game from './components/Game';\n\nclass App extends Component {\n\n  // ************************************\n  //      render\n  // ************************************\n  render() {\n    return (\n      <Game />\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}